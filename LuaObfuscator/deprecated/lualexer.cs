//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.1.6
//  Machine:  DAV-OFFICE
//  DateTime: 14.10.2011 15:26:10
//  UserName: dav
//  GPLEX input file <lualexer.l - 14.10.2011 15:24:38>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, parser, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Target machine default
//

//
// Experimental embedded frame
// Version 1.1.4 of 10-May-2010
//
//
#define BACKUP
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;

namespace LuaObfuscator
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 116;
        const int initial = 117;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public sbyte[] nxt;
        public Table(int m, int x, int d, sbyte[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {117, 0};

#region CompressedCharacterMap
    //
    // There are 51 equivalence classes
    // There are 4 character sequence regions
    // There are 2 tables, 173 entries
    // There are 2 runs, 0 singletons
    // Decision tree depth is 2
    //
    static sbyte[] mapC0 = new sbyte[127] {
/*     '\0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 26, 2, 2, 26, 2, 2, 
/*   '\x10' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x20' */ 2, 2, 29, 46, 2, 30, 31, 25, 32, 33, 34, 24, 35, 1, 23, 36, 
/*      '0' */ 27, 22, 22, 22, 22, 22, 22, 22, 22, 22, 37, 38, 48, 47, 50, 39, 
/*      '@' */ 2, 3, 6, 15, 5, 8, 13, 21, 19, 17, 21, 9, 11, 21, 4, 10, 
/*      'P' */ 18, 21, 7, 12, 16, 14, 21, 20, 28, 21, 21, 41, 2, 42, 45, 21, 
/*      '`' */ 2, 3, 6, 15, 5, 8, 13, 21, 19, 17, 21, 9, 11, 21, 4, 10, 
/*      'p' */ 18, 21, 7, 12, 16, 14, 21, 20, 28, 21, 21, 43, 40, 44, 49 };
    static sbyte[] mapC2 = new sbyte[46] {
/* '\u01C5' */ 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01D5' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* '\u01E5' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 453) // '\0' <= code <= '\u01C4'
        if (code < 127) // '\0' <= code <= '~'
          return mapC0[code - 0];
        else // '\x7F' <= code <= '\u01C4'
          return (sbyte)2;
      else // '\u01C5' <= code <= '\U0010FFFF'
        if (code < 499) // '\u01C5' <= code <= '\u01F2'
          return mapC2[code - 453];
        else // '\u01F3' <= code <= '\U0010FFFF'
          return (sbyte)2;
    }
#endregion

    static Table[] NxS = new Table[120] {
/* NxS[   0] */ new Table(0, 0, 0, null),
/* NxS[   1] */ new Table(1, 1, -1, new sbyte[] {116}),
/* NxS[   2] */ new Table(3, 26, -1, new sbyte[] {8, 114, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[   3] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 110, 8, 8, 8, 8, 8, 8, 111, 8, 8, 8, 8, 8, -1, -1, 
          118, -1, 8, 8}),
/* NxS[   4] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 109, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[   5] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 105, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[   6] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 96, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[   7] */ new Table(3, 26, -1, new sbyte[] {8, 89, 8, 8, 8, 8, 
          8, 8, 90, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[   8] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[   9] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 88, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  10] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 84, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  11] */ new Table(3, 26, -1, new sbyte[] {71, 8, 8, 8, 8, 8, 
          8, 72, 8, 8, 8, 73, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  12] */ new Table(3, 26, -1, new sbyte[] {8, 67, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  13] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 61, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 62, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  14] */ new Table(3, 26, -1, new sbyte[] {8, 59, 8, 8, 8, 8, 
          8, 8, 8, 8, 60, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  15] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 55, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  16] */ new Table(8, 20, -1, new sbyte[] {45, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 16, 46, -1, -1, -1, 16}),
/* NxS[  17] */ new Table(22, 6, -1, new sbyte[] {48, 53, -1, -1, -1, 48}),
/* NxS[  18] */ new Table(0, 0, -1, null),
/* NxS[  19] */ new Table(8, 21, -1, new sbyte[] {45, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 16, 46, -1, -1, -1, 16, 47}),
/* NxS[  20] */ new Table(0, 0, -1, null),
/* NxS[  21] */ new Table(0, 0, -1, null),
/* NxS[  22] */ new Table(0, 0, -1, null),
/* NxS[  23] */ new Table(0, 0, -1, null),
/* NxS[  24] */ new Table(0, 0, -1, null),
/* NxS[  25] */ new Table(0, 0, -1, null),
/* NxS[  26] */ new Table(0, 0, -1, null),
/* NxS[  27] */ new Table(0, 0, -1, null),
/* NxS[  28] */ new Table(0, 0, -1, null),
/* NxS[  29] */ new Table(0, 0, -1, null),
/* NxS[  30] */ new Table(0, 0, -1, null),
/* NxS[  31] */ new Table(0, 0, -1, null),
/* NxS[  32] */ new Table(0, 0, -1, null),
/* NxS[  33] */ new Table(0, 0, -1, null),
/* NxS[  34] */ new Table(0, 0, -1, null),
/* NxS[  35] */ new Table(0, 0, -1, null),
/* NxS[  36] */ new Table(0, 0, -1, null),
/* NxS[  37] */ new Table(0, 0, -1, null),
/* NxS[  38] */ new Table(47, 1, -1, new sbyte[] {44}),
/* NxS[  39] */ new Table(47, 1, -1, new sbyte[] {43}),
/* NxS[  40] */ new Table(47, 1, -1, new sbyte[] {41}),
/* NxS[  41] */ new Table(0, 0, -1, null),
/* NxS[  42] */ new Table(0, 0, -1, null),
/* NxS[  43] */ new Table(0, 0, -1, null),
/* NxS[  44] */ new Table(0, 0, -1, null),
/* NxS[  45] */ new Table(1, 27, -1, new sbyte[] {50, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 
          -1, 50, -1, -1, 51}),
/* NxS[  46] */ new Table(8, 20, -1, new sbyte[] {45, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 48, 49, -1, -1, -1, 48}),
/* NxS[  47] */ new Table(3, 25, -1, new sbyte[] {47, -1, 47, 47, -1, 47, 
          -1, -1, -1, -1, 47, -1, 47, -1, -1, -1, -1, -1, -1, 47, -1, -1, 
          -1, -1, 47}),
/* NxS[  48] */ new Table(8, 20, -1, new sbyte[] {45, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 48}),
/* NxS[  49] */ new Table(0, 0, -1, null),
/* NxS[  50] */ new Table(22, 6, -1, new sbyte[] {51, -1, -1, -1, -1, 51}),
/* NxS[  51] */ new Table(22, 6, -1, new sbyte[] {51, -1, -1, -1, -1, 51}),
/* NxS[  52] */ new Table(0, 0, -1, null),
/* NxS[  53] */ new Table(23, 1, -1, new sbyte[] {54}),
/* NxS[  54] */ new Table(0, 0, -1, null),
/* NxS[  55] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 56, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  56] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 57, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  57] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 58, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  58] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  59] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  60] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  61] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 65, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  62] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 63, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  63] */ new Table(3, 26, -1, new sbyte[] {8, 64, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  64] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  65] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 66, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  66] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  67] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 68, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  68] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 69, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  69] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 70, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  70] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  71] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 81, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  72] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 80, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  73] */ new Table(3, 26, -1, new sbyte[] {8, 74, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  74] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 75, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  75] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 76, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  76] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 77, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  77] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 78, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  78] */ new Table(3, 26, -1, new sbyte[] {8, 79, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  79] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  80] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  81] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 82, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  82] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 83, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  83] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  84] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 85, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  85] */ new Table(3, 26, -1, new sbyte[] {86, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  86] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 87, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  87] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  88] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  89] */ new Table(3, 26, -1, new sbyte[] {8, 8, 95, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  90] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 91, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  91] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 92, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  92] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 93, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  93] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 94, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  94] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  95] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  96] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 97, 8, 98, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  97] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 102, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  98] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 99, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[  99] */ new Table(3, 26, -1, new sbyte[] {100, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 100] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 101, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 101] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 102] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 103, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 103] */ new Table(3, 26, -1, new sbyte[] {8, 104, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 104] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 105] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 106, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 106] */ new Table(3, 26, -1, new sbyte[] {107, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 107] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          108, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 108] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 109] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 110] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 113, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 111] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 112, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 112] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 113] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 114] */ new Table(3, 26, -1, new sbyte[] {8, 8, 115, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 115] */ new Table(3, 26, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, 
          -1, -1, 8, 8}),
/* NxS[ 116] */ new Table(26, 26, 116, new sbyte[] {-1, 116, 116, 116, 116, 116, 
          116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 
          116, 116, 116, -1}),
/* NxS[ 117] */ new Table(20, 49, 8, new sbyte[] {15, 8, 16, 17, 18, 118, 
          -1, 19, 8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 
          33, 34, 35, 36, 37, 38, 39, 119, 40, -1, 1, -1, 2, 3, 4, 5, 
          6, 7, 8, 9, 10, 8, 11, 12, 8, 13, 14}),
/* NxS[ 118] */ new Table(0, 26, 118, new sbyte[] {-1, 118, 118, 118, 118, 118, 
          118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
          118, 118, 118, 52}),
/* NxS[ 119] */ new Table(47, 1, -1, new sbyte[] {42}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 51;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 117:
return TokenInfo(Tokens.EOF);
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1:
return TokenInfo(Tokens.MINUS_SIGN);
            break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 63:
        case 65:
        case 67:
        case 68:
        case 69:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 81:
        case 82:
        case 84:
        case 85:
        case 86:
        case 89:
        case 90:
        case 91:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 102:
        case 103:
        case 105:
        case 106:
        case 107:
        case 110:
        case 111:
        case 114:
Console.WriteLine("identifier: {0}", yytext);
								//yylval = new StatementIdentifier(yytext);
								return TokenInfo(Tokens.Identifier);
            break;
        case 16:
        case 19:
Console.WriteLine("integer: {0}", yytext);
								//yylval = StatementExactNumericConstant.Parse(yytext);
								//if (null == yylval)
								//	yyerror("Can't convert {0} to integer", yytext);

								return TokenInfo(Tokens.IntegerConst);
            break;
        case 17:
return TokenInfo(Tokens.PERIOD);
            break;
        case 18:
return TokenInfo(Tokens.PLUS_SIGN);
            break;
        case 20:
return TokenInfo(Tokens.DOUBLE_QUOTE);
            break;
        case 21:
return TokenInfo(Tokens.PERCENT);
            break;
        case 22:
return TokenInfo(Tokens.AMPERSAND);
            break;
        case 23:
return TokenInfo(Tokens.LEFT_PAREN);
            break;
        case 24:
return TokenInfo(Tokens.RIGHT_PAREN);
            break;
        case 25:
return TokenInfo(Tokens.ASTERISK);
            break;
        case 26:
return TokenInfo(Tokens.COMMA);
            break;
        case 27:
return TokenInfo(Tokens.SOLIDUS);
            break;
        case 28:
return TokenInfo(Tokens.COLON);
            break;
        case 29:
return TokenInfo(Tokens.SEMICOLON);
            break;
        case 30:
return TokenInfo(Tokens.QUESTION_MARK);
            break;
        case 31:
return TokenInfo(Tokens.VERTICAL_BAR);
            break;
        case 32:
return TokenInfo(Tokens.LEFT_BRACKET);
            break;
        case 33:
return TokenInfo(Tokens.RIGHT_BRACKET);
            break;
        case 34:
return TokenInfo(Tokens.LEFT_CURLYBRACKET);
            break;
        case 35:
return TokenInfo(Tokens.RIGHT_CURLYBRACKET);
            break;
        case 36:
return TokenInfo(Tokens.POWER);
            break;
        case 37:
return TokenInfo(Tokens.CAGE);
            break;
        case 38:
return TokenInfo(Tokens.EQUAL);
            break;
        case 39:
return TokenInfo(Tokens.OPERATOR_LT);
            break;
        case 40:
return TokenInfo(Tokens.OPERATOR_GT);
            break;
        case 41:
return TokenInfo(Tokens.OPERATOR_GE);
            break;
        case 42:
return TokenInfo(Tokens.OPERATOR_NE);
            break;
        case 43:
return TokenInfo(Tokens.OPERATOR_LE);
            break;
        case 44:
return TokenInfo(Tokens.OPERATOR_EQ);
            break;
        case 45:
yyless(yyleng - 1);

								//yylval = StatementApproximateNumericConstant.Parse(yytext);
								//if (null == yylval)
								//	yyerror("Can't convert {0} to decimal", yytext);

								return TokenInfo(Tokens.DoubleConst);
            break;
        case 46:
        case 48:
Console.WriteLine("decimal: {0}", yytext);
								////yylval = StatementDecimal.Parse(yytext);
								//yylval = StatementApproximateNumericConstant.Parse(yytext);
								//if (null == yylval)
								//	yyerror("Can't convert {0} to decimal", yytext);

								return TokenInfo(Tokens.DoubleConst);
            break;
        case 47:
Console.WriteLine("hexstring: {0}", yytext);
								// Ð£Ð´Ð°Ð»Ð¸Ð¼ Ð¸Ð· ÑÑÑÐ¾ÐºÐ¸ Ð¿ÑÐµÑÐ¸ÐºÑ 0x Ð¸ Ð¿ÑÐµÐ¾Ð±ÑÐ°Ð·ÑÐµÐ¼ ÐµÐµ Ð² Ð´Ð²Ð¾Ð¸ÑÐ½ÑÑ ÐºÐ¾Ð½ÑÑÐ°Ð½ÑÑ
								//yylval = StatementBinaryConstant.Parse(yytext.Substring(2));

								return TokenInfo(Tokens.BinaryConst);
            break;
        case 49:
yyless(yyleng-2);

								//yylval = StatementExactNumericConstant.Parse(yytext);
								//if (null == yylval)
								//	yyerror("Can't convert {0} to integer", yytext);

								return TokenInfo(Tokens.IntegerConst);
            break;
        case 50:
/* Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ°ÐµÐ¼ Ð½Ð°Ð·Ð°Ð´ ÑÐ¸Ð¼Ð²Ð¾Ð»Ñ [Ee][+-], Ð¸ Ð¾Ð±ÑÐ°Ð±Ð°ÑÑÐ²Ð°ÐµÐ¼ ÑÐ°ÐºÐ¶Ðµ, ÐºÐ°Ðº Ð¸ doublefail1 */
								yyless(yyleng-2);

								//yylval = StatementApproximateNumericConstant.Parse(yytext);
								//if (null == yylval)
								//	yyerror("Can't convert {0} to decimal", yytext);

								return TokenInfo(Tokens.DoubleConst);
            break;
        case 51:
Console.WriteLine("double: {0}", yytext);
								//yylval = StatementApproximateNumericConstant.Parse(yytext);
								//if (null == yylval)
								//	yyerror("Can't convert {0} to decimal", yytext);

								return TokenInfo(Tokens.DoubleConst);
            break;
        case 52:
Console.WriteLine("string: {0}", yytext);
								m_str.Append(yytext);

								//Console.WriteLine("yyleng: {0}, yytext: {1}, code: {2}, m_str: {3}", yyleng, yytext, (char)code, m_str);

								if (code != '\'')
								{
									//yylval = StatementStringConstant.Parse(yytext);
									if (null == yylval)
										yyerror("Can't convert {0} to string", yytext);

									m_str = new StringBuilder();

									return TokenInfo(Tokens.StringConst);
								}
            break;
        case 53:
return TokenInfo(Tokens.TWO_DOTS);
            break;
        case 54:
return TokenInfo(Tokens.THREE_DOTS);
            break;
        case 58:
return TokenInfo(Tokens.WHILE);
            break;
        case 59:
return TokenInfo(Tokens.IN);
            break;
        case 60:
return TokenInfo(Tokens.IF);
            break;
        case 64:
return TokenInfo(Tokens.THEN);
            break;
        case 66:
return TokenInfo(Tokens.TRUE);
            break;
        case 70:
return TokenInfo(Tokens.UNTIL);
            break;
        case 79:
return TokenInfo(Tokens.FUNCTION);
            break;
        case 80:
return TokenInfo(Tokens.FOR);
            break;
        case 83:
return TokenInfo(Tokens.FALSE);
            break;
        case 87:
return TokenInfo(Tokens.LOCAL);
            break;
        case 88:
return TokenInfo(Tokens.OR);
            break;
        case 92:
return TokenInfo(Tokens.ELSE);
            break;
        case 94:
return TokenInfo(Tokens.ELSEIF);
            break;
        case 95:
return TokenInfo(Tokens.END);
            break;
        case 101:
return TokenInfo(Tokens.REPEAT);
            break;
        case 104:
return TokenInfo(Tokens.RETURN);
            break;
        case 108:
return TokenInfo(Tokens.BREAK);
            break;
        case 109:
return TokenInfo(Tokens.DO);
            break;
        case 112:
return TokenInfo(Tokens.NIL);
            break;
        case 113:
return TokenInfo(Tokens.NOT);
            break;
        case 115:
return TokenInfo(Tokens.AND);
            break;
        case 116:
/* ÐÐ³Ð½Ð¾ÑÐ¸ÑÑÐµÐ¼ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ð¹ */
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

private StringBuilder m_str = new StringBuilder();

	public string ErrorMessage { get; private set; }

	public override void yyerror(string format, params object[] args)
	{
		//Console.WriteLine(format, args);
		ErrorMessage = string.Format("At line {0}, col {1} (pos {2}). {3}",
			yyline,
			yycol,
			yypos,
			string.Format(format, args));
	}

	private int TokenInfo(Tokens token)
	{
		yylloc = new Location(tokLin, tokCol, tokELin, tokECol, tokPos, tokEPos);

		return (int)token;
	}

	public string GetText(Location location)
	{
		return buffer.GetString(location.StartPosition, location.EndPosition);
	}

#endregion
    } // end class $Scanner


} // end namespace
