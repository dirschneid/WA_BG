//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Lua.g 2011-10-14 15:54:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LuaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARSTRING", "COMMENT", "EXP", "EscapeSequence", "FLOAT", "HEX", "HexDigit", "INT", "LINE_COMMENT", "LONGSTRING", "NAME", "NEWLINE", "NORMALSTRING", "OctalEscape", "UnicodeEscape", "WS", "'#'", "'%'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'..'", "'...'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'^'", "'and'", "'break'", "'do'", "'else'", "'elseif'", "'end'", "'false'", "'for'", "'function'", "'if'", "'in'", "'local'", "'nil'", "'not'", "'or'", "'repeat'", "'return'", "'then'", "'true'", "'until'", "'while'", "'{'", "'}'", "'~='"
	};
	public const int EOF=-1;
	public const int CHARSTRING=4;
	public const int COMMENT=5;
	public const int EXP=6;
	public const int EscapeSequence=7;
	public const int FLOAT=8;
	public const int HEX=9;
	public const int HexDigit=10;
	public const int INT=11;
	public const int LINE_COMMENT=12;
	public const int LONGSTRING=13;
	public const int NAME=14;
	public const int NEWLINE=15;
	public const int NORMALSTRING=16;
	public const int OctalEscape=17;
	public const int UnicodeEscape=18;
	public const int WS=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;

	public LuaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LuaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return LuaParser.tokenNames; } }
	public override string GrammarFileName { get { return "Lua.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_chunk();
	partial void LeaveRule_chunk();
	// $ANTLR start "chunk"
	// Lua.g:21:1: chunk : ( stat ( ';' )? )* ( laststat ( ';' )? )? ;
	[GrammarRule("chunk")]
	private void chunk()
	{
		EnterRule_chunk();
		EnterRule("chunk", 1);
		TraceIn("chunk", 1);
		try { DebugEnterRule(GrammarFileName, "chunk");
		DebugLocation(21, 41);
		try
		{
			// Lua.g:21:7: ( ( stat ( ';' )? )* ( laststat ( ';' )? )? )
			DebugEnterAlt(1);
			// Lua.g:21:9: ( stat ( ';' )? )* ( laststat ( ';' )? )?
			{
			DebugLocation(21, 9);
			// Lua.g:21:9: ( stat ( ';' )? )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==NAME||LA2_1==22||LA2_1==45||(LA2_1>=50 && LA2_1<=52)||LA2_1==54||LA2_1==58||LA2_1==63))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:21:10: stat ( ';' )?
					{
					DebugLocation(21, 10);
					PushFollow(Follow._stat_in_chunk26);
					stat();
					PopFollow();
					if (state.failed) return;
					DebugLocation(21, 15);
					// Lua.g:21:15: ( ';' )?
					int alt1=2;
					try { DebugEnterSubRule(1);
					try { DebugEnterDecision(1, false);
					int LA1_1 = input.LA(1);

					if ((LA1_1==33))
					{
						alt1 = 1;
					}
					} finally { DebugExitDecision(1); }
					switch (alt1)
					{
					case 1:
						DebugEnterAlt(1);
						// Lua.g:21:16: ';'
						{
						DebugLocation(21, 16);
						Match(input,33,Follow._33_in_chunk29); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(21, 24);
			// Lua.g:21:24: ( laststat ( ';' )? )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==44||LA4_1==59))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:21:25: laststat ( ';' )?
				{
				DebugLocation(21, 25);
				PushFollow(Follow._laststat_in_chunk36);
				laststat();
				PopFollow();
				if (state.failed) return;
				DebugLocation(21, 34);
				// Lua.g:21:34: ( ';' )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==33))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:21:35: ';'
					{
					DebugLocation(21, 35);
					Match(input,33,Follow._33_in_chunk39); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(3); }


				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chunk", 1);
			LeaveRule("chunk", 1);
			LeaveRule_chunk();
		}
		DebugLocation(21, 41);
		} finally { DebugExitRule(GrammarFileName, "chunk"); }
		return;

	}
	// $ANTLR end "chunk"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Lua.g:23:1: block : chunk ;
	[GrammarRule("block")]
	private void block()
	{
		EnterRule_block();
		EnterRule("block", 2);
		TraceIn("block", 2);
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(23, 13);
		try
		{
			// Lua.g:23:7: ( chunk )
			DebugEnterAlt(1);
			// Lua.g:23:9: chunk
			{
			DebugLocation(23, 9);
			PushFollow(Follow._chunk_in_block51);
			chunk();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 2);
			LeaveRule("block", 2);
			LeaveRule_block();
		}
		DebugLocation(23, 13);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return;

	}
	// $ANTLR end "block"

	partial void EnterRule_stat();
	partial void LeaveRule_stat();
	// $ANTLR start "stat"
	// Lua.g:25:1: stat : ( varlist1 '=' explist1 | functioncall | 'do' block 'end' | 'while' exp 'do' block 'end' | 'repeat' block 'until' exp | 'if' exp 'then' block ( 'elseif' exp 'then' block )* ( 'else' block )? 'end' | 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end' | 'for' namelist 'in' explist1 'do' block 'end' | 'function' funcname funcbody | 'local' 'function' NAME funcbody | 'local' namelist ( '=' explist1 )? );
	[GrammarRule("stat")]
	private void stat()
	{
		EnterRule_stat();
		EnterRule("stat", 3);
		TraceIn("stat", 3);
		try { DebugEnterRule(GrammarFileName, "stat");
		DebugLocation(25, 34);
		try
		{
			// Lua.g:25:6: ( varlist1 '=' explist1 | functioncall | 'do' block 'end' | 'while' exp 'do' block 'end' | 'repeat' block 'until' exp | 'if' exp 'then' block ( 'elseif' exp 'then' block )* ( 'else' block )? 'end' | 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end' | 'for' namelist 'in' explist1 'do' block 'end' | 'function' funcname funcbody | 'local' 'function' NAME funcbody | 'local' namelist ( '=' explist1 )? )
			int alt9=11;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case NAME:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred5_Lua_fragment)))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred6_Lua_fragment)))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 22:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred5_Lua_fragment)))
				{
					alt9 = 1;
				}
				else if ((EvaluatePredicate(synpred6_Lua_fragment)))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 45:
				{
				alt9 = 3;
				}
				break;
			case 63:
				{
				alt9 = 4;
				}
				break;
			case 58:
				{
				alt9 = 5;
				}
				break;
			case 52:
				{
				alt9 = 6;
				}
				break;
			case 50:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_Lua_fragment)))
				{
					alt9 = 7;
				}
				else if ((EvaluatePredicate(synpred15_Lua_fragment)))
				{
					alt9 = 8;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 9, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 51:
				{
				alt9 = 9;
				}
				break;
			case 54:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred17_Lua_fragment)))
				{
					alt9 = 10;
				}
				else if ((true))
				{
					alt9 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 9, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:25:9: varlist1 '=' explist1
				{
				DebugLocation(25, 9);
				PushFollow(Follow._varlist1_in_stat60);
				varlist1();
				PopFollow();
				if (state.failed) return;
				DebugLocation(25, 18);
				Match(input,36,Follow._36_in_stat62); if (state.failed) return;
				DebugLocation(25, 22);
				PushFollow(Follow._explist1_in_stat64);
				explist1();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:26:2: functioncall
				{
				DebugLocation(26, 2);
				PushFollow(Follow._functioncall_in_stat70);
				functioncall();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Lua.g:27:2: 'do' block 'end'
				{
				DebugLocation(27, 2);
				Match(input,45,Follow._45_in_stat76); if (state.failed) return;
				DebugLocation(27, 7);
				PushFollow(Follow._block_in_stat78);
				block();
				PopFollow();
				if (state.failed) return;
				DebugLocation(27, 13);
				Match(input,48,Follow._48_in_stat80); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Lua.g:28:2: 'while' exp 'do' block 'end'
				{
				DebugLocation(28, 2);
				Match(input,63,Follow._63_in_stat86); if (state.failed) return;
				DebugLocation(28, 10);
				PushFollow(Follow._exp_in_stat88);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(28, 14);
				Match(input,45,Follow._45_in_stat90); if (state.failed) return;
				DebugLocation(28, 19);
				PushFollow(Follow._block_in_stat92);
				block();
				PopFollow();
				if (state.failed) return;
				DebugLocation(28, 25);
				Match(input,48,Follow._48_in_stat94); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Lua.g:29:2: 'repeat' block 'until' exp
				{
				DebugLocation(29, 2);
				Match(input,58,Follow._58_in_stat100); if (state.failed) return;
				DebugLocation(29, 11);
				PushFollow(Follow._block_in_stat102);
				block();
				PopFollow();
				if (state.failed) return;
				DebugLocation(29, 17);
				Match(input,62,Follow._62_in_stat104); if (state.failed) return;
				DebugLocation(29, 25);
				PushFollow(Follow._exp_in_stat106);
				exp();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Lua.g:30:2: 'if' exp 'then' block ( 'elseif' exp 'then' block )* ( 'else' block )? 'end'
				{
				DebugLocation(30, 2);
				Match(input,52,Follow._52_in_stat112); if (state.failed) return;
				DebugLocation(30, 7);
				PushFollow(Follow._exp_in_stat114);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(30, 11);
				Match(input,60,Follow._60_in_stat116); if (state.failed) return;
				DebugLocation(30, 18);
				PushFollow(Follow._block_in_stat118);
				block();
				PopFollow();
				if (state.failed) return;
				DebugLocation(30, 24);
				// Lua.g:30:24: ( 'elseif' exp 'then' block )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1==47))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// Lua.g:30:25: 'elseif' exp 'then' block
						{
						DebugLocation(30, 25);
						Match(input,47,Follow._47_in_stat121); if (state.failed) return;
						DebugLocation(30, 34);
						PushFollow(Follow._exp_in_stat123);
						exp();
						PopFollow();
						if (state.failed) return;
						DebugLocation(30, 38);
						Match(input,60,Follow._60_in_stat125); if (state.failed) return;
						DebugLocation(30, 45);
						PushFollow(Follow._block_in_stat127);
						block();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(30, 53);
				// Lua.g:30:53: ( 'else' block )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==46))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:30:54: 'else' block
					{
					DebugLocation(30, 54);
					Match(input,46,Follow._46_in_stat132); if (state.failed) return;
					DebugLocation(30, 61);
					PushFollow(Follow._block_in_stat134);
					block();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(30, 69);
				Match(input,48,Follow._48_in_stat138); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Lua.g:31:2: 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end'
				{
				DebugLocation(31, 2);
				Match(input,50,Follow._50_in_stat144); if (state.failed) return;
				DebugLocation(31, 8);
				Match(input,NAME,Follow._NAME_in_stat146); if (state.failed) return;
				DebugLocation(31, 13);
				Match(input,36,Follow._36_in_stat148); if (state.failed) return;
				DebugLocation(31, 17);
				PushFollow(Follow._exp_in_stat150);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(31, 21);
				Match(input,26,Follow._26_in_stat152); if (state.failed) return;
				DebugLocation(31, 25);
				PushFollow(Follow._exp_in_stat154);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(31, 29);
				// Lua.g:31:29: ( ',' exp )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==26))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:31:30: ',' exp
					{
					DebugLocation(31, 30);
					Match(input,26,Follow._26_in_stat157); if (state.failed) return;
					DebugLocation(31, 34);
					PushFollow(Follow._exp_in_stat159);
					exp();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(31, 40);
				Match(input,45,Follow._45_in_stat163); if (state.failed) return;
				DebugLocation(31, 45);
				PushFollow(Follow._block_in_stat165);
				block();
				PopFollow();
				if (state.failed) return;
				DebugLocation(31, 51);
				Match(input,48,Follow._48_in_stat167); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Lua.g:32:2: 'for' namelist 'in' explist1 'do' block 'end'
				{
				DebugLocation(32, 2);
				Match(input,50,Follow._50_in_stat173); if (state.failed) return;
				DebugLocation(32, 8);
				PushFollow(Follow._namelist_in_stat175);
				namelist();
				PopFollow();
				if (state.failed) return;
				DebugLocation(32, 17);
				Match(input,53,Follow._53_in_stat177); if (state.failed) return;
				DebugLocation(32, 22);
				PushFollow(Follow._explist1_in_stat179);
				explist1();
				PopFollow();
				if (state.failed) return;
				DebugLocation(32, 31);
				Match(input,45,Follow._45_in_stat181); if (state.failed) return;
				DebugLocation(32, 36);
				PushFollow(Follow._block_in_stat183);
				block();
				PopFollow();
				if (state.failed) return;
				DebugLocation(32, 42);
				Match(input,48,Follow._48_in_stat185); if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Lua.g:33:2: 'function' funcname funcbody
				{
				DebugLocation(33, 2);
				Match(input,51,Follow._51_in_stat191); if (state.failed) return;
				DebugLocation(33, 13);
				PushFollow(Follow._funcname_in_stat193);
				funcname();
				PopFollow();
				if (state.failed) return;
				DebugLocation(33, 22);
				PushFollow(Follow._funcbody_in_stat195);
				funcbody();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Lua.g:34:2: 'local' 'function' NAME funcbody
				{
				DebugLocation(34, 2);
				Match(input,54,Follow._54_in_stat201); if (state.failed) return;
				DebugLocation(34, 10);
				Match(input,51,Follow._51_in_stat203); if (state.failed) return;
				DebugLocation(34, 21);
				Match(input,NAME,Follow._NAME_in_stat205); if (state.failed) return;
				DebugLocation(34, 26);
				PushFollow(Follow._funcbody_in_stat207);
				funcbody();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Lua.g:35:2: 'local' namelist ( '=' explist1 )?
				{
				DebugLocation(35, 2);
				Match(input,54,Follow._54_in_stat213); if (state.failed) return;
				DebugLocation(35, 10);
				PushFollow(Follow._namelist_in_stat215);
				namelist();
				PopFollow();
				if (state.failed) return;
				DebugLocation(35, 19);
				// Lua.g:35:19: ( '=' explist1 )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==36))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:35:20: '=' explist1
					{
					DebugLocation(35, 20);
					Match(input,36,Follow._36_in_stat218); if (state.failed) return;
					DebugLocation(35, 24);
					PushFollow(Follow._explist1_in_stat220);
					explist1();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stat", 3);
			LeaveRule("stat", 3);
			LeaveRule_stat();
		}
		DebugLocation(35, 34);
		} finally { DebugExitRule(GrammarFileName, "stat"); }
		return;

	}
	// $ANTLR end "stat"

	partial void EnterRule_laststat();
	partial void LeaveRule_laststat();
	// $ANTLR start "laststat"
	// Lua.g:37:1: laststat : ( 'return' ( explist1 )? | 'break' );
	[GrammarRule("laststat")]
	private void laststat()
	{
		EnterRule_laststat();
		EnterRule("laststat", 4);
		TraceIn("laststat", 4);
		try { DebugEnterRule(GrammarFileName, "laststat");
		DebugLocation(37, 41);
		try
		{
			// Lua.g:37:10: ( 'return' ( explist1 )? | 'break' )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==59))
			{
				alt11 = 1;
			}
			else if ((LA11_1==44))
			{
				alt11 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:37:12: 'return' ( explist1 )?
				{
				DebugLocation(37, 12);
				Match(input,59,Follow._59_in_laststat231); if (state.failed) return;
				DebugLocation(37, 21);
				// Lua.g:37:21: ( explist1 )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==CHARSTRING||LA10_1==EXP||(LA10_1>=FLOAT && LA10_1<=HEX)||LA10_1==INT||(LA10_1>=LONGSTRING && LA10_1<=NAME)||LA10_1==NORMALSTRING||LA10_1==20||LA10_1==22||LA10_1==27||LA10_1==30||LA10_1==49||LA10_1==51||(LA10_1>=55 && LA10_1<=56)||LA10_1==61||LA10_1==64))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:37:22: explist1
					{
					DebugLocation(37, 22);
					PushFollow(Follow._explist1_in_laststat234);
					explist1();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:37:35: 'break'
				{
				DebugLocation(37, 35);
				Match(input,44,Follow._44_in_laststat240); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("laststat", 4);
			LeaveRule("laststat", 4);
			LeaveRule_laststat();
		}
		DebugLocation(37, 41);
		} finally { DebugExitRule(GrammarFileName, "laststat"); }
		return;

	}
	// $ANTLR end "laststat"

	partial void EnterRule_funcname();
	partial void LeaveRule_funcname();
	// $ANTLR start "funcname"
	// Lua.g:39:1: funcname : NAME ( '.' NAME )* ( ':' NAME )? ;
	[GrammarRule("funcname")]
	private void funcname()
	{
		EnterRule_funcname();
		EnterRule("funcname", 5);
		TraceIn("funcname", 5);
		try { DebugEnterRule(GrammarFileName, "funcname");
		DebugLocation(39, 40);
		try
		{
			// Lua.g:39:10: ( NAME ( '.' NAME )* ( ':' NAME )? )
			DebugEnterAlt(1);
			// Lua.g:39:12: NAME ( '.' NAME )* ( ':' NAME )?
			{
			DebugLocation(39, 12);
			Match(input,NAME,Follow._NAME_in_funcname248); if (state.failed) return;
			DebugLocation(39, 17);
			// Lua.g:39:17: ( '.' NAME )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==28))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:39:18: '.' NAME
					{
					DebugLocation(39, 18);
					Match(input,28,Follow._28_in_funcname251); if (state.failed) return;
					DebugLocation(39, 22);
					Match(input,NAME,Follow._NAME_in_funcname253); if (state.failed) return;

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(39, 29);
			// Lua.g:39:29: ( ':' NAME )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==32))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:39:30: ':' NAME
				{
				DebugLocation(39, 30);
				Match(input,32,Follow._32_in_funcname258); if (state.failed) return;
				DebugLocation(39, 34);
				Match(input,NAME,Follow._NAME_in_funcname260); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("funcname", 5);
			LeaveRule("funcname", 5);
			LeaveRule_funcname();
		}
		DebugLocation(39, 40);
		} finally { DebugExitRule(GrammarFileName, "funcname"); }
		return;

	}
	// $ANTLR end "funcname"

	partial void EnterRule_varlist1();
	partial void LeaveRule_varlist1();
	// $ANTLR start "varlist1"
	// Lua.g:41:1: varlist1 : var ( ',' var )* ;
	[GrammarRule("varlist1")]
	private void varlist1()
	{
		EnterRule_varlist1();
		EnterRule("varlist1", 6);
		TraceIn("varlist1", 6);
		try { DebugEnterRule(GrammarFileName, "varlist1");
		DebugLocation(41, 25);
		try
		{
			// Lua.g:41:10: ( var ( ',' var )* )
			DebugEnterAlt(1);
			// Lua.g:41:12: var ( ',' var )*
			{
			DebugLocation(41, 12);
			PushFollow(Follow._var_in_varlist1271);
			var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(41, 16);
			// Lua.g:41:16: ( ',' var )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==26))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:41:17: ',' var
					{
					DebugLocation(41, 17);
					Match(input,26,Follow._26_in_varlist1274); if (state.failed) return;
					DebugLocation(41, 21);
					PushFollow(Follow._var_in_varlist1276);
					var();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("varlist1", 6);
			LeaveRule("varlist1", 6);
			LeaveRule_varlist1();
		}
		DebugLocation(41, 25);
		} finally { DebugExitRule(GrammarFileName, "varlist1"); }
		return;

	}
	// $ANTLR end "varlist1"

	partial void EnterRule_namelist();
	partial void LeaveRule_namelist();
	// $ANTLR start "namelist"
	// Lua.g:44:1: namelist : NAME ( ',' NAME )* ;
	[GrammarRule("namelist")]
	private void namelist()
	{
		EnterRule_namelist();
		EnterRule("namelist", 7);
		TraceIn("namelist", 7);
		try { DebugEnterRule(GrammarFileName, "namelist");
		DebugLocation(44, 27);
		try
		{
			// Lua.g:44:10: ( NAME ( ',' NAME )* )
			DebugEnterAlt(1);
			// Lua.g:44:12: NAME ( ',' NAME )*
			{
			DebugLocation(44, 12);
			Match(input,NAME,Follow._NAME_in_namelist287); if (state.failed) return;
			DebugLocation(44, 17);
			// Lua.g:44:17: ( ',' NAME )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==26))
				{
					int LA15_2 = input.LA(2);

					if ((LA15_2==NAME))
					{
						alt15 = 1;
					}


				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:44:18: ',' NAME
					{
					DebugLocation(44, 18);
					Match(input,26,Follow._26_in_namelist290); if (state.failed) return;
					DebugLocation(44, 22);
					Match(input,NAME,Follow._NAME_in_namelist292); if (state.failed) return;

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namelist", 7);
			LeaveRule("namelist", 7);
			LeaveRule_namelist();
		}
		DebugLocation(44, 27);
		} finally { DebugExitRule(GrammarFileName, "namelist"); }
		return;

	}
	// $ANTLR end "namelist"

	partial void EnterRule_explist1();
	partial void LeaveRule_explist1();
	// $ANTLR start "explist1"
	// Lua.g:46:1: explist1 : ( exp ',' )* exp ;
	[GrammarRule("explist1")]
	private void explist1()
	{
		EnterRule_explist1();
		EnterRule("explist1", 8);
		TraceIn("explist1", 8);
		try { DebugEnterRule(GrammarFileName, "explist1");
		DebugLocation(46, 25);
		try
		{
			// Lua.g:46:10: ( ( exp ',' )* exp )
			DebugEnterAlt(1);
			// Lua.g:46:12: ( exp ',' )* exp
			{
			DebugLocation(46, 12);
			// Lua.g:46:12: ( exp ',' )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				switch (input.LA(1))
				{
				case 55:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case 49:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case 61:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case EXP:
				case FLOAT:
				case HEX:
				case INT:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case CHARSTRING:
				case LONGSTRING:
				case NORMALSTRING:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case 30:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case 51:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case NAME:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case 22:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case 64:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				case 20:
				case 27:
				case 56:
					{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred25_Lua_fragment)))
					{
						alt16 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:46:13: exp ','
					{
					DebugLocation(46, 13);
					PushFollow(Follow._exp_in_explist1303);
					exp();
					PopFollow();
					if (state.failed) return;
					DebugLocation(46, 17);
					Match(input,26,Follow._26_in_explist1305); if (state.failed) return;

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(46, 23);
			PushFollow(Follow._exp_in_explist1309);
			exp();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explist1", 8);
			LeaveRule("explist1", 8);
			LeaveRule_explist1();
		}
		DebugLocation(46, 25);
		} finally { DebugExitRule(GrammarFileName, "explist1"); }
		return;

	}
	// $ANTLR end "explist1"

	partial void EnterRule_exp();
	partial void LeaveRule_exp();
	// $ANTLR start "exp"
	// Lua.g:48:1: exp : ( 'nil' | 'false' | 'true' | number | string | '...' | function | prefixexp | tableconstructor | unop exp ) ( binop exp )* ;
	[GrammarRule("exp")]
	private void exp()
	{
		EnterRule_exp();
		EnterRule("exp", 9);
		TraceIn("exp", 9);
		try { DebugEnterRule(GrammarFileName, "exp");
		DebugLocation(48, 126);
		try
		{
			// Lua.g:48:5: ( ( 'nil' | 'false' | 'true' | number | string | '...' | function | prefixexp | tableconstructor | unop exp ) ( binop exp )* )
			DebugEnterAlt(1);
			// Lua.g:48:8: ( 'nil' | 'false' | 'true' | number | string | '...' | function | prefixexp | tableconstructor | unop exp ) ( binop exp )*
			{
			DebugLocation(48, 8);
			// Lua.g:48:8: ( 'nil' | 'false' | 'true' | number | string | '...' | function | prefixexp | tableconstructor | unop exp )
			int alt17=10;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case 55:
				{
				alt17 = 1;
				}
				break;
			case 49:
				{
				alt17 = 2;
				}
				break;
			case 61:
				{
				alt17 = 3;
				}
				break;
			case EXP:
			case FLOAT:
			case HEX:
			case INT:
				{
				alt17 = 4;
				}
				break;
			case CHARSTRING:
			case LONGSTRING:
			case NORMALSTRING:
				{
				alt17 = 5;
				}
				break;
			case 30:
				{
				alt17 = 6;
				}
				break;
			case 51:
				{
				alt17 = 7;
				}
				break;
			case NAME:
			case 22:
				{
				alt17 = 8;
				}
				break;
			case 64:
				{
				alt17 = 9;
				}
				break;
			case 20:
			case 27:
			case 56:
				{
				alt17 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:48:9: 'nil'
				{
				DebugLocation(48, 9);
				Match(input,55,Follow._55_in_exp319); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:48:17: 'false'
				{
				DebugLocation(48, 17);
				Match(input,49,Follow._49_in_exp323); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Lua.g:48:27: 'true'
				{
				DebugLocation(48, 27);
				Match(input,61,Follow._61_in_exp327); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Lua.g:48:36: number
				{
				DebugLocation(48, 36);
				PushFollow(Follow._number_in_exp331);
				number();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Lua.g:48:45: string
				{
				DebugLocation(48, 45);
				PushFollow(Follow._string_in_exp335);
				@string();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Lua.g:48:54: '...'
				{
				DebugLocation(48, 54);
				Match(input,30,Follow._30_in_exp339); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Lua.g:48:62: function
				{
				DebugLocation(48, 62);
				PushFollow(Follow._function_in_exp343);
				function();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Lua.g:48:73: prefixexp
				{
				DebugLocation(48, 73);
				PushFollow(Follow._prefixexp_in_exp347);
				prefixexp();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Lua.g:48:85: tableconstructor
				{
				DebugLocation(48, 85);
				PushFollow(Follow._tableconstructor_in_exp351);
				tableconstructor();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Lua.g:48:104: unop exp
				{
				DebugLocation(48, 104);
				PushFollow(Follow._unop_in_exp355);
				unop();
				PopFollow();
				if (state.failed) return;
				DebugLocation(48, 109);
				PushFollow(Follow._exp_in_exp357);
				exp();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(48, 114);
			// Lua.g:48:114: ( binop exp )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==21||(LA18_1>=24 && LA18_1<=25)||LA18_1==27||LA18_1==29||LA18_1==31||(LA18_1>=34 && LA18_1<=35)||(LA18_1>=37 && LA18_1<=39)||(LA18_1>=42 && LA18_1<=43)||LA18_1==57||LA18_1==66))
				{
					int LA18_2 = input.LA(2);

					if ((EvaluatePredicate(synpred35_Lua_fragment)))
					{
						alt18 = 1;
					}


				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:48:115: binop exp
					{
					DebugLocation(48, 115);
					PushFollow(Follow._binop_in_exp361);
					binop();
					PopFollow();
					if (state.failed) return;
					DebugLocation(48, 121);
					PushFollow(Follow._exp_in_exp363);
					exp();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exp", 9);
			LeaveRule("exp", 9);
			LeaveRule_exp();
		}
		DebugLocation(48, 126);
		} finally { DebugExitRule(GrammarFileName, "exp"); }
		return;

	}
	// $ANTLR end "exp"

	partial void EnterRule_var();
	partial void LeaveRule_var();
	// $ANTLR start "var"
	// Lua.g:50:1: var : ( NAME | '(' exp ')' varSuffix ) ( varSuffix )* ;
	[GrammarRule("var")]
	private void var()
	{
		EnterRule_var();
		EnterRule("var", 10);
		TraceIn("var", 10);
		try { DebugEnterRule(GrammarFileName, "var");
		DebugLocation(50, 46);
		try
		{
			// Lua.g:50:4: ( ( NAME | '(' exp ')' varSuffix ) ( varSuffix )* )
			DebugEnterAlt(1);
			// Lua.g:50:6: ( NAME | '(' exp ')' varSuffix ) ( varSuffix )*
			{
			DebugLocation(50, 6);
			// Lua.g:50:6: ( NAME | '(' exp ')' varSuffix )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==NAME))
			{
				alt19 = 1;
			}
			else if ((LA19_1==22))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:50:7: NAME
				{
				DebugLocation(50, 7);
				Match(input,NAME,Follow._NAME_in_var374); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:50:14: '(' exp ')' varSuffix
				{
				DebugLocation(50, 14);
				Match(input,22,Follow._22_in_var378); if (state.failed) return;
				DebugLocation(50, 18);
				PushFollow(Follow._exp_in_var380);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(50, 22);
				Match(input,23,Follow._23_in_var382); if (state.failed) return;
				DebugLocation(50, 26);
				PushFollow(Follow._varSuffix_in_var384);
				varSuffix();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(50, 37);
			// Lua.g:50:37: ( varSuffix )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred37_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case 22:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred37_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case 64:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred37_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case CHARSTRING:
				case LONGSTRING:
				case NORMALSTRING:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred37_Lua_fragment)))
					{
						alt20 = 1;
					}


					}
					break;
				case 28:
				case 40:
					{
					alt20 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:50:37: varSuffix
					{
					DebugLocation(50, 37);
					PushFollow(Follow._varSuffix_in_var387);
					varSuffix();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("var", 10);
			LeaveRule("var", 10);
			LeaveRule_var();
		}
		DebugLocation(50, 46);
		} finally { DebugExitRule(GrammarFileName, "var"); }
		return;

	}
	// $ANTLR end "var"

	partial void EnterRule_prefixexp();
	partial void LeaveRule_prefixexp();
	// $ANTLR start "prefixexp"
	// Lua.g:52:1: prefixexp : varOrExp ( nameAndArgs )* ;
	[GrammarRule("prefixexp")]
	private void prefixexp()
	{
		EnterRule_prefixexp();
		EnterRule("prefixexp", 11);
		TraceIn("prefixexp", 11);
		try { DebugEnterRule(GrammarFileName, "prefixexp");
		DebugLocation(52, 32);
		try
		{
			// Lua.g:52:10: ( varOrExp ( nameAndArgs )* )
			DebugEnterAlt(1);
			// Lua.g:52:12: varOrExp ( nameAndArgs )*
			{
			DebugLocation(52, 12);
			PushFollow(Follow._varOrExp_in_prefixexp395);
			varOrExp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(52, 21);
			// Lua.g:52:21: ( nameAndArgs )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==22))
				{
					int LA21_2 = input.LA(2);

					if ((EvaluatePredicate(synpred38_Lua_fragment)))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_1==CHARSTRING||LA21_1==LONGSTRING||LA21_1==NORMALSTRING||LA21_1==32||LA21_1==64))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:52:21: nameAndArgs
					{
					DebugLocation(52, 21);
					PushFollow(Follow._nameAndArgs_in_prefixexp397);
					nameAndArgs();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prefixexp", 11);
			LeaveRule("prefixexp", 11);
			LeaveRule_prefixexp();
		}
		DebugLocation(52, 32);
		} finally { DebugExitRule(GrammarFileName, "prefixexp"); }
		return;

	}
	// $ANTLR end "prefixexp"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// Lua.g:54:1: functioncall : varOrExp ( nameAndArgs )+ ;
	[GrammarRule("functioncall")]
	private void functioncall()
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 12);
		TraceIn("functioncall", 12);
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(54, 35);
		try
		{
			// Lua.g:54:13: ( varOrExp ( nameAndArgs )+ )
			DebugEnterAlt(1);
			// Lua.g:54:15: varOrExp ( nameAndArgs )+
			{
			DebugLocation(54, 15);
			PushFollow(Follow._varOrExp_in_functioncall405);
			varOrExp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(54, 24);
			// Lua.g:54:24: ( nameAndArgs )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==22))
				{
					int LA22_2 = input.LA(2);

					if ((EvaluatePredicate(synpred39_Lua_fragment)))
					{
						alt22 = 1;
					}


				}
				else if ((LA22_1==CHARSTRING||LA22_1==LONGSTRING||LA22_1==NORMALSTRING||LA22_1==32||LA22_1==64))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:54:24: nameAndArgs
					{
					DebugLocation(54, 24);
					PushFollow(Follow._nameAndArgs_in_functioncall407);
					nameAndArgs();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functioncall", 12);
			LeaveRule("functioncall", 12);
			LeaveRule_functioncall();
		}
		DebugLocation(54, 35);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_varOrExp();
	partial void LeaveRule_varOrExp();
	// $ANTLR start "varOrExp"
	// Lua.g:64:1: varOrExp : ( var | '(' exp ')' );
	[GrammarRule("varOrExp")]
	private void varOrExp()
	{
		EnterRule_varOrExp();
		EnterRule("varOrExp", 13);
		TraceIn("varOrExp", 13);
		try { DebugEnterRule(GrammarFileName, "varOrExp");
		DebugLocation(64, 27);
		try
		{
			// Lua.g:64:9: ( var | '(' exp ')' )
			int alt23=2;
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==NAME))
			{
				alt23 = 1;
			}
			else if ((LA23_1==22))
			{
				int LA23_2 = input.LA(2);

				if ((EvaluatePredicate(synpred40_Lua_fragment)))
				{
					alt23 = 1;
				}
				else if ((true))
				{
					alt23 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:64:11: var
				{
				DebugLocation(64, 11);
				PushFollow(Follow._var_in_varOrExp418);
				var();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:64:17: '(' exp ')'
				{
				DebugLocation(64, 17);
				Match(input,22,Follow._22_in_varOrExp422); if (state.failed) return;
				DebugLocation(64, 21);
				PushFollow(Follow._exp_in_varOrExp424);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(64, 25);
				Match(input,23,Follow._23_in_varOrExp426); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("varOrExp", 13);
			LeaveRule("varOrExp", 13);
			LeaveRule_varOrExp();
		}
		DebugLocation(64, 27);
		} finally { DebugExitRule(GrammarFileName, "varOrExp"); }
		return;

	}
	// $ANTLR end "varOrExp"

	partial void EnterRule_nameAndArgs();
	partial void LeaveRule_nameAndArgs();
	// $ANTLR start "nameAndArgs"
	// Lua.g:66:1: nameAndArgs : ( ':' NAME )? args ;
	[GrammarRule("nameAndArgs")]
	private void nameAndArgs()
	{
		EnterRule_nameAndArgs();
		EnterRule("nameAndArgs", 14);
		TraceIn("nameAndArgs", 14);
		try { DebugEnterRule(GrammarFileName, "nameAndArgs");
		DebugLocation(66, 29);
		try
		{
			// Lua.g:66:12: ( ( ':' NAME )? args )
			DebugEnterAlt(1);
			// Lua.g:66:14: ( ':' NAME )? args
			{
			DebugLocation(66, 14);
			// Lua.g:66:14: ( ':' NAME )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==32))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:66:15: ':' NAME
				{
				DebugLocation(66, 15);
				Match(input,32,Follow._32_in_nameAndArgs434); if (state.failed) return;
				DebugLocation(66, 19);
				Match(input,NAME,Follow._NAME_in_nameAndArgs436); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(66, 26);
			PushFollow(Follow._args_in_nameAndArgs440);
			args();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("nameAndArgs", 14);
			LeaveRule("nameAndArgs", 14);
			LeaveRule_nameAndArgs();
		}
		DebugLocation(66, 29);
		} finally { DebugExitRule(GrammarFileName, "nameAndArgs"); }
		return;

	}
	// $ANTLR end "nameAndArgs"

	partial void EnterRule_varSuffix();
	partial void LeaveRule_varSuffix();
	// $ANTLR start "varSuffix"
	// Lua.g:68:1: varSuffix : ( nameAndArgs )* ( '[' exp ']' | '.' NAME ) ;
	[GrammarRule("varSuffix")]
	private void varSuffix()
	{
		EnterRule_varSuffix();
		EnterRule("varSuffix", 15);
		TraceIn("varSuffix", 15);
		try { DebugEnterRule(GrammarFileName, "varSuffix");
		DebugLocation(68, 48);
		try
		{
			// Lua.g:68:10: ( ( nameAndArgs )* ( '[' exp ']' | '.' NAME ) )
			DebugEnterAlt(1);
			// Lua.g:68:12: ( nameAndArgs )* ( '[' exp ']' | '.' NAME )
			{
			DebugLocation(68, 12);
			// Lua.g:68:12: ( nameAndArgs )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==CHARSTRING||LA25_1==LONGSTRING||LA25_1==NORMALSTRING||LA25_1==22||LA25_1==32||LA25_1==64))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:68:12: nameAndArgs
					{
					DebugLocation(68, 12);
					PushFollow(Follow._nameAndArgs_in_varSuffix447);
					nameAndArgs();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(68, 25);
			// Lua.g:68:25: ( '[' exp ']' | '.' NAME )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==40))
			{
				alt26 = 1;
			}
			else if ((LA26_1==28))
			{
				alt26 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:68:26: '[' exp ']'
				{
				DebugLocation(68, 26);
				Match(input,40,Follow._40_in_varSuffix451); if (state.failed) return;
				DebugLocation(68, 30);
				PushFollow(Follow._exp_in_varSuffix453);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(68, 34);
				Match(input,41,Follow._41_in_varSuffix455); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:68:40: '.' NAME
				{
				DebugLocation(68, 40);
				Match(input,28,Follow._28_in_varSuffix459); if (state.failed) return;
				DebugLocation(68, 44);
				Match(input,NAME,Follow._NAME_in_varSuffix461); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("varSuffix", 15);
			LeaveRule("varSuffix", 15);
			LeaveRule_varSuffix();
		}
		DebugLocation(68, 48);
		} finally { DebugExitRule(GrammarFileName, "varSuffix"); }
		return;

	}
	// $ANTLR end "varSuffix"

	partial void EnterRule_args();
	partial void LeaveRule_args();
	// $ANTLR start "args"
	// Lua.g:70:1: args : ( '(' ( explist1 )? ')' | tableconstructor | string );
	[GrammarRule("args")]
	private void args()
	{
		EnterRule_args();
		EnterRule("args", 16);
		TraceIn("args", 16);
		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(70, 56);
		try
		{
			// Lua.g:70:6: ( '(' ( explist1 )? ')' | tableconstructor | string )
			int alt28=3;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case 22:
				{
				alt28 = 1;
				}
				break;
			case 64:
				{
				alt28 = 2;
				}
				break;
			case CHARSTRING:
			case LONGSTRING:
			case NORMALSTRING:
				{
				alt28 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:70:9: '(' ( explist1 )? ')'
				{
				DebugLocation(70, 9);
				Match(input,22,Follow._22_in_args471); if (state.failed) return;
				DebugLocation(70, 13);
				// Lua.g:70:13: ( explist1 )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==CHARSTRING||LA27_1==EXP||(LA27_1>=FLOAT && LA27_1<=HEX)||LA27_1==INT||(LA27_1>=LONGSTRING && LA27_1<=NAME)||LA27_1==NORMALSTRING||LA27_1==20||LA27_1==22||LA27_1==27||LA27_1==30||LA27_1==49||LA27_1==51||(LA27_1>=55 && LA27_1<=56)||LA27_1==61||LA27_1==64))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:70:14: explist1
					{
					DebugLocation(70, 14);
					PushFollow(Follow._explist1_in_args474);
					explist1();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(70, 25);
				Match(input,23,Follow._23_in_args478); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:70:31: tableconstructor
				{
				DebugLocation(70, 31);
				PushFollow(Follow._tableconstructor_in_args482);
				tableconstructor();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Lua.g:70:50: string
				{
				DebugLocation(70, 50);
				PushFollow(Follow._string_in_args486);
				@string();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("args", 16);
			LeaveRule("args", 16);
			LeaveRule_args();
		}
		DebugLocation(70, 56);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return;

	}
	// $ANTLR end "args"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// Lua.g:72:1: function : 'function' funcbody ;
	[GrammarRule("function")]
	private void function()
	{
		EnterRule_function();
		EnterRule("function", 17);
		TraceIn("function", 17);
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(72, 30);
		try
		{
			// Lua.g:72:10: ( 'function' funcbody )
			DebugEnterAlt(1);
			// Lua.g:72:12: 'function' funcbody
			{
			DebugLocation(72, 12);
			Match(input,51,Follow._51_in_function495); if (state.failed) return;
			DebugLocation(72, 23);
			PushFollow(Follow._funcbody_in_function497);
			funcbody();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function", 17);
			LeaveRule("function", 17);
			LeaveRule_function();
		}
		DebugLocation(72, 30);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return;

	}
	// $ANTLR end "function"

	partial void EnterRule_funcbody();
	partial void LeaveRule_funcbody();
	// $ANTLR start "funcbody"
	// Lua.g:74:1: funcbody : '(' ( parlist1 )? ')' block 'end' ;
	[GrammarRule("funcbody")]
	private void funcbody()
	{
		EnterRule_funcbody();
		EnterRule("funcbody", 18);
		TraceIn("funcbody", 18);
		try { DebugEnterRule(GrammarFileName, "funcbody");
		DebugLocation(74, 42);
		try
		{
			// Lua.g:74:10: ( '(' ( parlist1 )? ')' block 'end' )
			DebugEnterAlt(1);
			// Lua.g:74:12: '(' ( parlist1 )? ')' block 'end'
			{
			DebugLocation(74, 12);
			Match(input,22,Follow._22_in_funcbody505); if (state.failed) return;
			DebugLocation(74, 16);
			// Lua.g:74:16: ( parlist1 )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==NAME||LA29_1==30))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:74:17: parlist1
				{
				DebugLocation(74, 17);
				PushFollow(Follow._parlist1_in_funcbody508);
				parlist1();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(74, 28);
			Match(input,23,Follow._23_in_funcbody512); if (state.failed) return;
			DebugLocation(74, 32);
			PushFollow(Follow._block_in_funcbody514);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(74, 38);
			Match(input,48,Follow._48_in_funcbody516); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("funcbody", 18);
			LeaveRule("funcbody", 18);
			LeaveRule_funcbody();
		}
		DebugLocation(74, 42);
		} finally { DebugExitRule(GrammarFileName, "funcbody"); }
		return;

	}
	// $ANTLR end "funcbody"

	partial void EnterRule_parlist1();
	partial void LeaveRule_parlist1();
	// $ANTLR start "parlist1"
	// Lua.g:76:1: parlist1 : ( namelist ( ',' '...' )? | '...' );
	[GrammarRule("parlist1")]
	private void parlist1()
	{
		EnterRule_parlist1();
		EnterRule("parlist1", 19);
		TraceIn("parlist1", 19);
		try { DebugEnterRule(GrammarFileName, "parlist1");
		DebugLocation(76, 40);
		try
		{
			// Lua.g:76:10: ( namelist ( ',' '...' )? | '...' )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==NAME))
			{
				alt31 = 1;
			}
			else if ((LA31_1==30))
			{
				alt31 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:76:12: namelist ( ',' '...' )?
				{
				DebugLocation(76, 12);
				PushFollow(Follow._namelist_in_parlist1524);
				namelist();
				PopFollow();
				if (state.failed) return;
				DebugLocation(76, 21);
				// Lua.g:76:21: ( ',' '...' )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==26))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:76:22: ',' '...'
					{
					DebugLocation(76, 22);
					Match(input,26,Follow._26_in_parlist1527); if (state.failed) return;
					DebugLocation(76, 26);
					Match(input,30,Follow._30_in_parlist1529); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:76:36: '...'
				{
				DebugLocation(76, 36);
				Match(input,30,Follow._30_in_parlist1535); if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parlist1", 19);
			LeaveRule("parlist1", 19);
			LeaveRule_parlist1();
		}
		DebugLocation(76, 40);
		} finally { DebugExitRule(GrammarFileName, "parlist1"); }
		return;

	}
	// $ANTLR end "parlist1"

	partial void EnterRule_tableconstructor();
	partial void LeaveRule_tableconstructor();
	// $ANTLR start "tableconstructor"
	// Lua.g:78:1: tableconstructor : '{' ( fieldlist )? '}' ;
	[GrammarRule("tableconstructor")]
	private void tableconstructor()
	{
		EnterRule_tableconstructor();
		EnterRule("tableconstructor", 20);
		TraceIn("tableconstructor", 20);
		try { DebugEnterRule(GrammarFileName, "tableconstructor");
		DebugLocation(78, 39);
		try
		{
			// Lua.g:78:18: ( '{' ( fieldlist )? '}' )
			DebugEnterAlt(1);
			// Lua.g:78:20: '{' ( fieldlist )? '}'
			{
			DebugLocation(78, 20);
			Match(input,64,Follow._64_in_tableconstructor543); if (state.failed) return;
			DebugLocation(78, 24);
			// Lua.g:78:24: ( fieldlist )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==CHARSTRING||LA32_1==EXP||(LA32_1>=FLOAT && LA32_1<=HEX)||LA32_1==INT||(LA32_1>=LONGSTRING && LA32_1<=NAME)||LA32_1==NORMALSTRING||LA32_1==20||LA32_1==22||LA32_1==27||LA32_1==30||LA32_1==40||LA32_1==49||LA32_1==51||(LA32_1>=55 && LA32_1<=56)||LA32_1==61||LA32_1==64))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:78:25: fieldlist
				{
				DebugLocation(78, 25);
				PushFollow(Follow._fieldlist_in_tableconstructor546);
				fieldlist();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(78, 37);
			Match(input,65,Follow._65_in_tableconstructor550); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tableconstructor", 20);
			LeaveRule("tableconstructor", 20);
			LeaveRule_tableconstructor();
		}
		DebugLocation(78, 39);
		} finally { DebugExitRule(GrammarFileName, "tableconstructor"); }
		return;

	}
	// $ANTLR end "tableconstructor"

	partial void EnterRule_fieldlist();
	partial void LeaveRule_fieldlist();
	// $ANTLR start "fieldlist"
	// Lua.g:80:1: fieldlist : field ( fieldsep field )* ( fieldsep )? ;
	[GrammarRule("fieldlist")]
	private void fieldlist()
	{
		EnterRule_fieldlist();
		EnterRule("fieldlist", 21);
		TraceIn("fieldlist", 21);
		try { DebugEnterRule(GrammarFileName, "fieldlist");
		DebugLocation(80, 47);
		try
		{
			// Lua.g:80:11: ( field ( fieldsep field )* ( fieldsep )? )
			DebugEnterAlt(1);
			// Lua.g:80:13: field ( fieldsep field )* ( fieldsep )?
			{
			DebugLocation(80, 13);
			PushFollow(Follow._field_in_fieldlist558);
			field();
			PopFollow();
			if (state.failed) return;
			DebugLocation(80, 19);
			// Lua.g:80:19: ( fieldsep field )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==26||LA33_1==33))
				{
					int LA33_2 = input.LA(2);

					if ((LA33_2==CHARSTRING||LA33_2==EXP||(LA33_2>=FLOAT && LA33_2<=HEX)||LA33_2==INT||(LA33_2>=LONGSTRING && LA33_2<=NAME)||LA33_2==NORMALSTRING||LA33_2==20||LA33_2==22||LA33_2==27||LA33_2==30||LA33_2==40||LA33_2==49||LA33_2==51||(LA33_2>=55 && LA33_2<=56)||LA33_2==61||LA33_2==64))
					{
						alt33 = 1;
					}


				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// Lua.g:80:20: fieldsep field
					{
					DebugLocation(80, 20);
					PushFollow(Follow._fieldsep_in_fieldlist561);
					fieldsep();
					PopFollow();
					if (state.failed) return;
					DebugLocation(80, 29);
					PushFollow(Follow._field_in_fieldlist563);
					field();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }

			DebugLocation(80, 37);
			// Lua.g:80:37: ( fieldsep )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==26||LA34_1==33))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:80:38: fieldsep
				{
				DebugLocation(80, 38);
				PushFollow(Follow._fieldsep_in_fieldlist568);
				fieldsep();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldlist", 21);
			LeaveRule("fieldlist", 21);
			LeaveRule_fieldlist();
		}
		DebugLocation(80, 47);
		} finally { DebugExitRule(GrammarFileName, "fieldlist"); }
		return;

	}
	// $ANTLR end "fieldlist"

	partial void EnterRule_field();
	partial void LeaveRule_field();
	// $ANTLR start "field"
	// Lua.g:82:1: field : ( '[' exp ']' '=' exp | NAME '=' exp | exp );
	[GrammarRule("field")]
	private void field()
	{
		EnterRule_field();
		EnterRule("field", 22);
		TraceIn("field", 22);
		try { DebugEnterRule(GrammarFileName, "field");
		DebugLocation(82, 48);
		try
		{
			// Lua.g:82:7: ( '[' exp ']' '=' exp | NAME '=' exp | exp )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case 40:
				{
				alt35 = 1;
				}
				break;
			case NAME:
				{
				int LA35_2 = input.LA(2);

				if ((LA35_2==36))
				{
					alt35 = 2;
				}
				else if ((LA35_2==EOF||LA35_2==CHARSTRING||LA35_2==LONGSTRING||LA35_2==NORMALSTRING||(LA35_2>=21 && LA35_2<=22)||(LA35_2>=24 && LA35_2<=29)||(LA35_2>=31 && LA35_2<=35)||(LA35_2>=37 && LA35_2<=40)||(LA35_2>=42 && LA35_2<=43)||LA35_2==57||(LA35_2>=64 && LA35_2<=66)))
				{
					alt35 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 35, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CHARSTRING:
			case EXP:
			case FLOAT:
			case HEX:
			case INT:
			case LONGSTRING:
			case NORMALSTRING:
			case 20:
			case 22:
			case 27:
			case 30:
			case 49:
			case 51:
			case 55:
			case 56:
			case 61:
			case 64:
				{
				alt35 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:82:9: '[' exp ']' '=' exp
				{
				DebugLocation(82, 9);
				Match(input,40,Follow._40_in_field578); if (state.failed) return;
				DebugLocation(82, 13);
				PushFollow(Follow._exp_in_field580);
				exp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(82, 17);
				Match(input,41,Follow._41_in_field582); if (state.failed) return;
				DebugLocation(82, 21);
				Match(input,36,Follow._36_in_field584); if (state.failed) return;
				DebugLocation(82, 25);
				PushFollow(Follow._exp_in_field586);
				exp();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Lua.g:82:31: NAME '=' exp
				{
				DebugLocation(82, 31);
				Match(input,NAME,Follow._NAME_in_field590); if (state.failed) return;
				DebugLocation(82, 36);
				Match(input,36,Follow._36_in_field592); if (state.failed) return;
				DebugLocation(82, 40);
				PushFollow(Follow._exp_in_field594);
				exp();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Lua.g:82:46: exp
				{
				DebugLocation(82, 46);
				PushFollow(Follow._exp_in_field598);
				exp();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("field", 22);
			LeaveRule("field", 22);
			LeaveRule_field();
		}
		DebugLocation(82, 48);
		} finally { DebugExitRule(GrammarFileName, "field"); }
		return;

	}
	// $ANTLR end "field"

	partial void EnterRule_fieldsep();
	partial void LeaveRule_fieldsep();
	// $ANTLR start "fieldsep"
	// Lua.g:84:1: fieldsep : ( ',' | ';' );
	[GrammarRule("fieldsep")]
	private void fieldsep()
	{
		EnterRule_fieldsep();
		EnterRule("fieldsep", 23);
		TraceIn("fieldsep", 23);
		try { DebugEnterRule(GrammarFileName, "fieldsep");
		DebugLocation(84, 20);
		try
		{
			// Lua.g:84:10: ( ',' | ';' )
			DebugEnterAlt(1);
			// Lua.g:
			{
			DebugLocation(84, 10);
			if (input.LA(1)==26||input.LA(1)==33)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldsep", 23);
			LeaveRule("fieldsep", 23);
			LeaveRule_fieldsep();
		}
		DebugLocation(84, 20);
		} finally { DebugExitRule(GrammarFileName, "fieldsep"); }
		return;

	}
	// $ANTLR end "fieldsep"

	partial void EnterRule_binop();
	partial void LeaveRule_binop();
	// $ANTLR start "binop"
	// Lua.g:86:1: binop : ( '+' | '-' | '*' | '/' | '^' | '%' | '..' | '<' | '<=' | '>' | '>=' | '==' | '~=' | 'and' | 'or' );
	[GrammarRule("binop")]
	private void binop()
	{
		EnterRule_binop();
		EnterRule("binop", 24);
		TraceIn("binop", 24);
		try { DebugEnterRule(GrammarFileName, "binop");
		DebugLocation(86, 15);
		try
		{
			// Lua.g:86:7: ( '+' | '-' | '*' | '/' | '^' | '%' | '..' | '<' | '<=' | '>' | '>=' | '==' | '~=' | 'and' | 'or' )
			DebugEnterAlt(1);
			// Lua.g:
			{
			DebugLocation(86, 7);
			if (input.LA(1)==21||(input.LA(1)>=24 && input.LA(1)<=25)||input.LA(1)==27||input.LA(1)==29||input.LA(1)==31||(input.LA(1)>=34 && input.LA(1)<=35)||(input.LA(1)>=37 && input.LA(1)<=39)||(input.LA(1)>=42 && input.LA(1)<=43)||input.LA(1)==57||input.LA(1)==66)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("binop", 24);
			LeaveRule("binop", 24);
			LeaveRule_binop();
		}
		DebugLocation(88, 15);
		} finally { DebugExitRule(GrammarFileName, "binop"); }
		return;

	}
	// $ANTLR end "binop"

	partial void EnterRule_unop();
	partial void LeaveRule_unop();
	// $ANTLR start "unop"
	// Lua.g:90:1: unop : ( '-' | 'not' | '#' );
	[GrammarRule("unop")]
	private void unop()
	{
		EnterRule_unop();
		EnterRule("unop", 25);
		TraceIn("unop", 25);
		try { DebugEnterRule(GrammarFileName, "unop");
		DebugLocation(90, 24);
		try
		{
			// Lua.g:90:6: ( '-' | 'not' | '#' )
			DebugEnterAlt(1);
			// Lua.g:
			{
			DebugLocation(90, 6);
			if (input.LA(1)==20||input.LA(1)==27||input.LA(1)==56)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unop", 25);
			LeaveRule("unop", 25);
			LeaveRule_unop();
		}
		DebugLocation(90, 24);
		} finally { DebugExitRule(GrammarFileName, "unop"); }
		return;

	}
	// $ANTLR end "unop"

	partial void EnterRule_number();
	partial void LeaveRule_number();
	// $ANTLR start "number"
	// Lua.g:92:1: number : ( INT | FLOAT | EXP | HEX );
	[GrammarRule("number")]
	private void number()
	{
		EnterRule_number();
		EnterRule("number", 26);
		TraceIn("number", 26);
		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(92, 32);
		try
		{
			// Lua.g:92:8: ( INT | FLOAT | EXP | HEX )
			DebugEnterAlt(1);
			// Lua.g:
			{
			DebugLocation(92, 8);
			if (input.LA(1)==EXP||(input.LA(1)>=FLOAT && input.LA(1)<=HEX)||input.LA(1)==INT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("number", 26);
			LeaveRule("number", 26);
			LeaveRule_number();
		}
		DebugLocation(92, 32);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return;

	}
	// $ANTLR end "number"

	partial void EnterRule_string();
	partial void LeaveRule_string();
	// $ANTLR start "string"
	// Lua.g:94:1: string : ( NORMALSTRING | CHARSTRING | LONGSTRING );
	[GrammarRule("string")]
	private void @string()
	{
		EnterRule_string();
		EnterRule("string", 27);
		TraceIn("string", 27);
		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(94, 47);
		try
		{
			// Lua.g:94:8: ( NORMALSTRING | CHARSTRING | LONGSTRING )
			DebugEnterAlt(1);
			// Lua.g:
			{
			DebugLocation(94, 8);
			if (input.LA(1)==CHARSTRING||input.LA(1)==LONGSTRING||input.LA(1)==NORMALSTRING)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("string", 27);
			LeaveRule("string", 27);
			LeaveRule_string();
		}
		DebugLocation(94, 47);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return;

	}
	// $ANTLR end "string"

	partial void EnterRule_synpred5_Lua_fragment();
	partial void LeaveRule_synpred5_Lua_fragment();

	// $ANTLR start synpred5_Lua
	public void synpred5_Lua_fragment()
	{
		EnterRule_synpred5_Lua_fragment();
		EnterRule("synpred5_Lua_fragment", 32);
		TraceIn("synpred5_Lua_fragment", 32);
		try
		{
			// Lua.g:25:9: ( varlist1 '=' explist1 )
			DebugEnterAlt(1);
			// Lua.g:25:9: varlist1 '=' explist1
			{
			DebugLocation(25, 9);
			PushFollow(Follow._varlist1_in_synpred5_Lua60);
			varlist1();
			PopFollow();
			if (state.failed) return;
			DebugLocation(25, 18);
			Match(input,36,Follow._36_in_synpred5_Lua62); if (state.failed) return;
			DebugLocation(25, 22);
			PushFollow(Follow._explist1_in_synpred5_Lua64);
			explist1();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_Lua_fragment", 32);
			LeaveRule("synpred5_Lua_fragment", 32);
			LeaveRule_synpred5_Lua_fragment();
		}
	}
	// $ANTLR end synpred5_Lua

	partial void EnterRule_synpred6_Lua_fragment();
	partial void LeaveRule_synpred6_Lua_fragment();

	// $ANTLR start synpred6_Lua
	public void synpred6_Lua_fragment()
	{
		EnterRule_synpred6_Lua_fragment();
		EnterRule("synpred6_Lua_fragment", 33);
		TraceIn("synpred6_Lua_fragment", 33);
		try
		{
			// Lua.g:26:2: ( functioncall )
			DebugEnterAlt(1);
			// Lua.g:26:2: functioncall
			{
			DebugLocation(26, 2);
			PushFollow(Follow._functioncall_in_synpred6_Lua70);
			functioncall();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Lua_fragment", 33);
			LeaveRule("synpred6_Lua_fragment", 33);
			LeaveRule_synpred6_Lua_fragment();
		}
	}
	// $ANTLR end synpred6_Lua

	partial void EnterRule_synpred14_Lua_fragment();
	partial void LeaveRule_synpred14_Lua_fragment();

	// $ANTLR start synpred14_Lua
	public void synpred14_Lua_fragment()
	{
		EnterRule_synpred14_Lua_fragment();
		EnterRule("synpred14_Lua_fragment", 41);
		TraceIn("synpred14_Lua_fragment", 41);
		try
		{
			// Lua.g:31:2: ( 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end' )
			DebugEnterAlt(1);
			// Lua.g:31:2: 'for' NAME '=' exp ',' exp ( ',' exp )? 'do' block 'end'
			{
			DebugLocation(31, 2);
			Match(input,50,Follow._50_in_synpred14_Lua144); if (state.failed) return;
			DebugLocation(31, 8);
			Match(input,NAME,Follow._NAME_in_synpred14_Lua146); if (state.failed) return;
			DebugLocation(31, 13);
			Match(input,36,Follow._36_in_synpred14_Lua148); if (state.failed) return;
			DebugLocation(31, 17);
			PushFollow(Follow._exp_in_synpred14_Lua150);
			exp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(31, 21);
			Match(input,26,Follow._26_in_synpred14_Lua152); if (state.failed) return;
			DebugLocation(31, 25);
			PushFollow(Follow._exp_in_synpred14_Lua154);
			exp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(31, 29);
			// Lua.g:31:29: ( ',' exp )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==26))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Lua.g:31:30: ',' exp
				{
				DebugLocation(31, 30);
				Match(input,26,Follow._26_in_synpred14_Lua157); if (state.failed) return;
				DebugLocation(31, 34);
				PushFollow(Follow._exp_in_synpred14_Lua159);
				exp();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(31, 40);
			Match(input,45,Follow._45_in_synpred14_Lua163); if (state.failed) return;
			DebugLocation(31, 45);
			PushFollow(Follow._block_in_synpred14_Lua165);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(31, 51);
			Match(input,48,Follow._48_in_synpred14_Lua167); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Lua_fragment", 41);
			LeaveRule("synpred14_Lua_fragment", 41);
			LeaveRule_synpred14_Lua_fragment();
		}
	}
	// $ANTLR end synpred14_Lua

	partial void EnterRule_synpred15_Lua_fragment();
	partial void LeaveRule_synpred15_Lua_fragment();

	// $ANTLR start synpred15_Lua
	public void synpred15_Lua_fragment()
	{
		EnterRule_synpred15_Lua_fragment();
		EnterRule("synpred15_Lua_fragment", 42);
		TraceIn("synpred15_Lua_fragment", 42);
		try
		{
			// Lua.g:32:2: ( 'for' namelist 'in' explist1 'do' block 'end' )
			DebugEnterAlt(1);
			// Lua.g:32:2: 'for' namelist 'in' explist1 'do' block 'end'
			{
			DebugLocation(32, 2);
			Match(input,50,Follow._50_in_synpred15_Lua173); if (state.failed) return;
			DebugLocation(32, 8);
			PushFollow(Follow._namelist_in_synpred15_Lua175);
			namelist();
			PopFollow();
			if (state.failed) return;
			DebugLocation(32, 17);
			Match(input,53,Follow._53_in_synpred15_Lua177); if (state.failed) return;
			DebugLocation(32, 22);
			PushFollow(Follow._explist1_in_synpred15_Lua179);
			explist1();
			PopFollow();
			if (state.failed) return;
			DebugLocation(32, 31);
			Match(input,45,Follow._45_in_synpred15_Lua181); if (state.failed) return;
			DebugLocation(32, 36);
			PushFollow(Follow._block_in_synpred15_Lua183);
			block();
			PopFollow();
			if (state.failed) return;
			DebugLocation(32, 42);
			Match(input,48,Follow._48_in_synpred15_Lua185); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Lua_fragment", 42);
			LeaveRule("synpred15_Lua_fragment", 42);
			LeaveRule_synpred15_Lua_fragment();
		}
	}
	// $ANTLR end synpred15_Lua

	partial void EnterRule_synpred17_Lua_fragment();
	partial void LeaveRule_synpred17_Lua_fragment();

	// $ANTLR start synpred17_Lua
	public void synpred17_Lua_fragment()
	{
		EnterRule_synpred17_Lua_fragment();
		EnterRule("synpred17_Lua_fragment", 44);
		TraceIn("synpred17_Lua_fragment", 44);
		try
		{
			// Lua.g:34:2: ( 'local' 'function' NAME funcbody )
			DebugEnterAlt(1);
			// Lua.g:34:2: 'local' 'function' NAME funcbody
			{
			DebugLocation(34, 2);
			Match(input,54,Follow._54_in_synpred17_Lua201); if (state.failed) return;
			DebugLocation(34, 10);
			Match(input,51,Follow._51_in_synpred17_Lua203); if (state.failed) return;
			DebugLocation(34, 21);
			Match(input,NAME,Follow._NAME_in_synpred17_Lua205); if (state.failed) return;
			DebugLocation(34, 26);
			PushFollow(Follow._funcbody_in_synpred17_Lua207);
			funcbody();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Lua_fragment", 44);
			LeaveRule("synpred17_Lua_fragment", 44);
			LeaveRule_synpred17_Lua_fragment();
		}
	}
	// $ANTLR end synpred17_Lua

	partial void EnterRule_synpred25_Lua_fragment();
	partial void LeaveRule_synpred25_Lua_fragment();

	// $ANTLR start synpred25_Lua
	public void synpred25_Lua_fragment()
	{
		EnterRule_synpred25_Lua_fragment();
		EnterRule("synpred25_Lua_fragment", 52);
		TraceIn("synpred25_Lua_fragment", 52);
		try
		{
			// Lua.g:46:13: ( exp ',' )
			DebugEnterAlt(1);
			// Lua.g:46:13: exp ','
			{
			DebugLocation(46, 13);
			PushFollow(Follow._exp_in_synpred25_Lua303);
			exp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(46, 17);
			Match(input,26,Follow._26_in_synpred25_Lua305); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred25_Lua_fragment", 52);
			LeaveRule("synpred25_Lua_fragment", 52);
			LeaveRule_synpred25_Lua_fragment();
		}
	}
	// $ANTLR end synpred25_Lua

	partial void EnterRule_synpred35_Lua_fragment();
	partial void LeaveRule_synpred35_Lua_fragment();

	// $ANTLR start synpred35_Lua
	public void synpred35_Lua_fragment()
	{
		EnterRule_synpred35_Lua_fragment();
		EnterRule("synpred35_Lua_fragment", 62);
		TraceIn("synpred35_Lua_fragment", 62);
		try
		{
			// Lua.g:48:115: ( binop exp )
			DebugEnterAlt(1);
			// Lua.g:48:115: binop exp
			{
			DebugLocation(48, 115);
			PushFollow(Follow._binop_in_synpred35_Lua361);
			binop();
			PopFollow();
			if (state.failed) return;
			DebugLocation(48, 121);
			PushFollow(Follow._exp_in_synpred35_Lua363);
			exp();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred35_Lua_fragment", 62);
			LeaveRule("synpred35_Lua_fragment", 62);
			LeaveRule_synpred35_Lua_fragment();
		}
	}
	// $ANTLR end synpred35_Lua

	partial void EnterRule_synpred37_Lua_fragment();
	partial void LeaveRule_synpred37_Lua_fragment();

	// $ANTLR start synpred37_Lua
	public void synpred37_Lua_fragment()
	{
		EnterRule_synpred37_Lua_fragment();
		EnterRule("synpred37_Lua_fragment", 64);
		TraceIn("synpred37_Lua_fragment", 64);
		try
		{
			// Lua.g:50:37: ( varSuffix )
			DebugEnterAlt(1);
			// Lua.g:50:37: varSuffix
			{
			DebugLocation(50, 37);
			PushFollow(Follow._varSuffix_in_synpred37_Lua387);
			varSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_Lua_fragment", 64);
			LeaveRule("synpred37_Lua_fragment", 64);
			LeaveRule_synpred37_Lua_fragment();
		}
	}
	// $ANTLR end synpred37_Lua

	partial void EnterRule_synpred38_Lua_fragment();
	partial void LeaveRule_synpred38_Lua_fragment();

	// $ANTLR start synpred38_Lua
	public void synpred38_Lua_fragment()
	{
		EnterRule_synpred38_Lua_fragment();
		EnterRule("synpred38_Lua_fragment", 65);
		TraceIn("synpred38_Lua_fragment", 65);
		try
		{
			// Lua.g:52:21: ( nameAndArgs )
			DebugEnterAlt(1);
			// Lua.g:52:21: nameAndArgs
			{
			DebugLocation(52, 21);
			PushFollow(Follow._nameAndArgs_in_synpred38_Lua397);
			nameAndArgs();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred38_Lua_fragment", 65);
			LeaveRule("synpred38_Lua_fragment", 65);
			LeaveRule_synpred38_Lua_fragment();
		}
	}
	// $ANTLR end synpred38_Lua

	partial void EnterRule_synpred39_Lua_fragment();
	partial void LeaveRule_synpred39_Lua_fragment();

	// $ANTLR start synpred39_Lua
	public void synpred39_Lua_fragment()
	{
		EnterRule_synpred39_Lua_fragment();
		EnterRule("synpred39_Lua_fragment", 66);
		TraceIn("synpred39_Lua_fragment", 66);
		try
		{
			// Lua.g:54:24: ( nameAndArgs )
			DebugEnterAlt(1);
			// Lua.g:54:24: nameAndArgs
			{
			DebugLocation(54, 24);
			PushFollow(Follow._nameAndArgs_in_synpred39_Lua407);
			nameAndArgs();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred39_Lua_fragment", 66);
			LeaveRule("synpred39_Lua_fragment", 66);
			LeaveRule_synpred39_Lua_fragment();
		}
	}
	// $ANTLR end synpred39_Lua

	partial void EnterRule_synpred40_Lua_fragment();
	partial void LeaveRule_synpred40_Lua_fragment();

	// $ANTLR start synpred40_Lua
	public void synpred40_Lua_fragment()
	{
		EnterRule_synpred40_Lua_fragment();
		EnterRule("synpred40_Lua_fragment", 67);
		TraceIn("synpred40_Lua_fragment", 67);
		try
		{
			// Lua.g:64:11: ( var )
			DebugEnterAlt(1);
			// Lua.g:64:11: var
			{
			DebugLocation(64, 11);
			PushFollow(Follow._var_in_synpred40_Lua418);
			var();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred40_Lua_fragment", 67);
			LeaveRule("synpred40_Lua_fragment", 67);
			LeaveRule_synpred40_Lua_fragment();
		}
	}
	// $ANTLR end synpred40_Lua
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _stat_in_chunk26 = new BitSet(new ulong[]{0x8C5C300200404002UL});
		public static readonly BitSet _33_in_chunk29 = new BitSet(new ulong[]{0x8C5C300000404002UL});
		public static readonly BitSet _laststat_in_chunk36 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_chunk39 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chunk_in_block51 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varlist1_in_stat60 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_stat62 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _explist1_in_stat64 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_stat70 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_stat76 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat78 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_stat80 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_stat86 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_stat88 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_stat90 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat92 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_stat94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_stat100 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat102 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stat104 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_stat106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_stat112 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_stat114 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stat116 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat118 = new BitSet(new ulong[]{0x1C00000000000UL});
		public static readonly BitSet _47_in_stat121 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_stat123 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stat125 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat127 = new BitSet(new ulong[]{0x1C00000000000UL});
		public static readonly BitSet _46_in_stat132 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat134 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_stat138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_stat144 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_stat146 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_stat148 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_stat150 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_stat152 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_stat154 = new BitSet(new ulong[]{0x200004000000UL});
		public static readonly BitSet _26_in_stat157 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_stat159 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_stat163 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat165 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_stat167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_stat173 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _namelist_in_stat175 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_stat177 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _explist1_in_stat179 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_stat181 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_stat183 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_stat185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_stat191 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _funcname_in_stat193 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _funcbody_in_stat195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_stat201 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_stat203 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_stat205 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _funcbody_in_stat207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_stat213 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _namelist_in_stat215 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _36_in_stat218 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _explist1_in_stat220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_laststat231 = new BitSet(new ulong[]{0x218A000048516B52UL,0x1UL});
		public static readonly BitSet _explist1_in_laststat234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_laststat240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_funcname248 = new BitSet(new ulong[]{0x110000002UL});
		public static readonly BitSet _28_in_funcname251 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_funcname253 = new BitSet(new ulong[]{0x110000002UL});
		public static readonly BitSet _32_in_funcname258 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_funcname260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _var_in_varlist1271 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _26_in_varlist1274 = new BitSet(new ulong[]{0x404000UL});
		public static readonly BitSet _var_in_varlist1276 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _NAME_in_namelist287 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _26_in_namelist290 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_namelist292 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _exp_in_explist1303 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_explist1305 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_explist1309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_exp319 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _49_in_exp323 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _61_in_exp327 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _number_in_exp331 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _string_in_exp335 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _30_in_exp339 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _function_in_exp343 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _prefixexp_in_exp347 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _tableconstructor_in_exp351 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _unop_in_exp355 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_exp357 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _binop_in_exp361 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_exp363 = new BitSet(new ulong[]{0x2000CECAB200002UL,0x4UL});
		public static readonly BitSet _NAME_in_var374 = new BitSet(new ulong[]{0x10110412012UL,0x1UL});
		public static readonly BitSet _22_in_var378 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_var380 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_var382 = new BitSet(new ulong[]{0x10110412010UL,0x1UL});
		public static readonly BitSet _varSuffix_in_var384 = new BitSet(new ulong[]{0x10110412012UL,0x1UL});
		public static readonly BitSet _varSuffix_in_var387 = new BitSet(new ulong[]{0x10110412012UL,0x1UL});
		public static readonly BitSet _varOrExp_in_prefixexp395 = new BitSet(new ulong[]{0x100412012UL,0x1UL});
		public static readonly BitSet _nameAndArgs_in_prefixexp397 = new BitSet(new ulong[]{0x100412012UL,0x1UL});
		public static readonly BitSet _varOrExp_in_functioncall405 = new BitSet(new ulong[]{0x100412010UL,0x1UL});
		public static readonly BitSet _nameAndArgs_in_functioncall407 = new BitSet(new ulong[]{0x100412012UL,0x1UL});
		public static readonly BitSet _var_in_varOrExp418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_varOrExp422 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_varOrExp424 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_varOrExp426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_nameAndArgs434 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_nameAndArgs436 = new BitSet(new ulong[]{0x412010UL,0x1UL});
		public static readonly BitSet _args_in_nameAndArgs440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameAndArgs_in_varSuffix447 = new BitSet(new ulong[]{0x10110412010UL,0x1UL});
		public static readonly BitSet _40_in_varSuffix451 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_varSuffix453 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_varSuffix455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_varSuffix459 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_varSuffix461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_args471 = new BitSet(new ulong[]{0x218A000048D16B50UL,0x1UL});
		public static readonly BitSet _explist1_in_args474 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_args478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableconstructor_in_args482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_args486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_function495 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _funcbody_in_function497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_funcbody505 = new BitSet(new ulong[]{0x40804000UL});
		public static readonly BitSet _parlist1_in_funcbody508 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_funcbody512 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_funcbody514 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_funcbody516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namelist_in_parlist1524 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _26_in_parlist1527 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_parlist1529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_parlist1535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_tableconstructor543 = new BitSet(new ulong[]{0x218A010048516B50UL,0x3UL});
		public static readonly BitSet _fieldlist_in_tableconstructor546 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_tableconstructor550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_in_fieldlist558 = new BitSet(new ulong[]{0x204000002UL});
		public static readonly BitSet _fieldsep_in_fieldlist561 = new BitSet(new ulong[]{0x218A010048516B50UL,0x1UL});
		public static readonly BitSet _field_in_fieldlist563 = new BitSet(new ulong[]{0x204000002UL});
		public static readonly BitSet _fieldsep_in_fieldlist568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_field578 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_field580 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_field582 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_field584 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_field586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_field590 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_field592 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_field594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exp_in_field598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varlist1_in_synpred5_Lua60 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_synpred5_Lua62 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _explist1_in_synpred5_Lua64 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_synpred6_Lua70 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_synpred14_Lua144 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_synpred14_Lua146 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_synpred14_Lua148 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_synpred14_Lua150 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_synpred14_Lua152 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_synpred14_Lua154 = new BitSet(new ulong[]{0x200004000000UL});
		public static readonly BitSet _26_in_synpred14_Lua157 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_synpred14_Lua159 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_synpred14_Lua163 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_synpred14_Lua165 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_synpred14_Lua167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_synpred15_Lua173 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _namelist_in_synpred15_Lua175 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_synpred15_Lua177 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _explist1_in_synpred15_Lua179 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_synpred15_Lua181 = new BitSet(new ulong[]{0x8C5C300000404000UL});
		public static readonly BitSet _block_in_synpred15_Lua183 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _48_in_synpred15_Lua185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_synpred17_Lua201 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_synpred17_Lua203 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _NAME_in_synpred17_Lua205 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _funcbody_in_synpred17_Lua207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exp_in_synpred25_Lua303 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_synpred25_Lua305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _binop_in_synpred35_Lua361 = new BitSet(new ulong[]{0x218A000048516B50UL,0x1UL});
		public static readonly BitSet _exp_in_synpred35_Lua363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _varSuffix_in_synpred37_Lua387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameAndArgs_in_synpred38_Lua397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameAndArgs_in_synpred39_Lua407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _var_in_synpred40_Lua418 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
